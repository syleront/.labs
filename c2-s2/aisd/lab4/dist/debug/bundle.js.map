{"version":3,"file":"bundle.js","sources":["../../src/config.js","../../src/meter.js","../../src/manual-array-input/input.js","../../src/manual-array-input/index.js","../../src/csvgen.js","../../src/results-manager.js","../../src/constants.js","../../src/sort-methods.js","../../src/array-generators.js","../../src/app.js"],"sourcesContent":["// импорт и инициализация библиотеки для чтения .env\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n","// импорт встроенной библиотеки для замера производительности\r\nimport { performance } from \"perf_hooks\";\r\n\r\nconst meter = {\r\n  // функция для замера времени выполнения функций\r\n  // первый аргумент - замеряемая функция\r\n  // все последующие - аргументы для замеряемой функции\r\n  async race(func, ...args) {\r\n    // засекаем время\r\n    const t = performance.now();\r\n    // выполняем функцию | имеется небольшой костыль во избежание ошибки из-за контекста\r\n    const result = await (func.run ? func.run.apply(func, args) : func.apply(this, args));\r\n    // возвращаем объект, где { time: время выполнения в мс, result: результат выполнения функции }\r\n    return { time: (performance.now() - t).toFixed(2), result };\r\n  }\r\n};\r\n\r\nexport default meter;\r\n","import readline from \"readline\";\r\n\r\n// Promise обертка чтения ввода пользователя, для использования в async функциях\r\nexport default function input(question = \"\") {\r\n  // возвращаем новый Promise\r\n  return new Promise((resolve) => {\r\n    // создаем интерфейс для чтения ввода\r\n    const rl = readline.createInterface({\r\n      input: process.stdin,\r\n      output: process.stdout\r\n    });\r\n\r\n    // задаем вопрос\r\n    rl.question(`${question} `, (answer) => {\r\n      // получаем ответ, закрываем интерфейс\r\n      rl.close();\r\n      // отдаем ответ\r\n      resolve(answer);\r\n    });\r\n  });\r\n}\r\n","// импорт обертки над readline\r\nimport input from \"./input\";\r\n\r\nexport default async function manualArrayInput(length) {\r\n  // объявляем переменную, где будет массив\r\n  let array = null;\r\n\r\n  while (array === null) {\r\n    // запрашиваем ввод с консоли\r\n    const answer = await input(`Введите ${length} элементов через пробел:`);\r\n\r\n    try {\r\n      // сплитим входную строку по пробелам\r\n      const splitted = answer.split(/\\s+/);\r\n\r\n      // если количество элементов != нужной длине, кидаем ошибку\r\n      // если нет - конвертируем все входные значения в числа, и присваиваем значение array\r\n      if (splitted.length !== length) {\r\n        throw new Error(`введено элементов: ${splitted.length}, нужно: ${length}`);\r\n      } else {\r\n        array = splitted.map((e) => Number(e));\r\n      }\r\n    } catch (e) {\r\n      console.error(`Допущена ошибка при вводе: ${e.message}`);\r\n    }\r\n  }\r\n\r\n  // создаем и возвращаем НОВЫЙ массив, во избежание потери оптимизации массивов у v8\r\n  // см. https://habr.com/ru/company/oleg-bunin/blog/417459/\r\n  return Array.from({ length }, (e, i) => array[i]);\r\n}\r\n","// импорт библиотеки для работы с файловой системой\r\nimport fs from \"fs\";\r\n\r\nexport default class CSVGenerator {\r\n  constructor() {\r\n    // внутренний массив со значениями экземпляра класса\r\n    this._csvArray = [];\r\n  }\r\n\r\n  // метод для добавления значения в последнюю строку текущего csv\r\n  add(items) {\r\n    this._csvArray[this._csvArray.length - 1].push(...items);\r\n    return true;\r\n  }\r\n\r\n  // метод для добавления новой строки\r\n  // если передан items, то создает строку со значением/значениями\r\n  addRow(items) {\r\n    if (typeof items !== \"undefined\" && !Array.isArray(items)) items = [items];\r\n    this._csvArray.push(typeof items !== \"undefined\" ? [...items] : []);\r\n    return true;\r\n  }\r\n\r\n  // метод для конвертации массива экземпляра в обычную строку\r\n  build() {\r\n    return this._csvArray\r\n      .map((e) => e === null || typeof e === \"undefined\" ? \"\" : e)\r\n      .map((e) => e.join(\";\"))\r\n      .join(\"\\n\");\r\n  }\r\n\r\n  // метод для записи текущего массива экземпляра в файл\r\n  async writeToFile(path) {\r\n    const data = this.build();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      fs.writeFile(path, data, (err) => {\r\n        if (err) reject(err);\r\n        else resolve(true);\r\n      });\r\n    });\r\n  }\r\n}\r\n","// суть менеджера - уменьшить визуальный мусор в главном файле\r\nexport default class ResultsManager {\r\n  constructor() {\r\n    this._results = {};\r\n  }\r\n\r\n  add(prop, value) {\r\n    if (this._results[prop]) {\r\n      this._results[prop].push(value);\r\n    } else {\r\n      this._results[prop] = [value];\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    this._results = {};\r\n  }\r\n\r\n  get() {\r\n    return this._results;\r\n  }\r\n}\r\n","// параметры для массивов\r\nexport const ARRAY_SIZES = [20, 500, 1000, 3000, 5000, 10000];\r\nexport const ARRAY_MIN_VALUE = 0;\r\nexport const ARRAY_MAX_VALUE = 100;\r\n\r\n// алиасы методов генерации массивов\r\nexport const ARRAY_ALIAS_GENERATOR_RANDOM = \"Случайный порядок\";\r\nexport const ARRAY_ALIAS_GENERATOR_SORTED = \"Отсортированный\";\r\nexport const ARRAY_ALIAS_GENERATOR_REVERSED = \"Обратный порядок\";\r\nexport const ARRAY_ALIAS_GENERATOR_THIRD_SORTED = \"Частично отсортированный (1/3 массива)\";\r\nexport const ARRAY_ALIAS_GENERATOR_TWOTHIRDS_SORTED = \"Частично отсортированный (2/3 массива)\";\r\n\r\n// названия методов сортировки\r\nexport const METHOD_ALIAS_INCLUSION = \"Прямое включение (1.4)\";\r\nexport const METHOD_ALIAS_SELECTION = \"Прямой выбор (1.5)\";\r\nexport const METHOD_ALIAS_BUBBLE = \"Прямой обмен (1.6)\";\r\nexport const METHOD_ALIAS_QUICK = \"Быстрая сортировка (1.7)\";\r\n\r\n// константы для генерации csv\r\n// если env переменная CSV = \"true\", то CSV_NEEDED = true\r\nexport const CSV_NEEDED = process.env.CSV === \"true\";\r\n// путь выходного .csv файла\r\nexport const CSV_OUTPUT_PATH = \"./results.csv\";\r\n\r\n// если env переменная MANUAL_INPUT = \"true\", то MANUAL_INPUT = true\r\nexport const MANUAL_INPUT = process.env.MANUAL_INPUT === \"true\";\r\n","// импорт констант с названиями\r\nimport {\r\n  METHOD_ALIAS_INCLUSION,\r\n  METHOD_ALIAS_SELECTION,\r\n  METHOD_ALIAS_BUBBLE,\r\n  METHOD_ALIAS_QUICK\r\n} from \"./constants\";\r\n\r\n// реализация алгоритма сортировки прямым включением (1.4) из методички\r\nexport const inclusion = {\r\n  name: METHOD_ALIAS_INCLUSION,\r\n  run(arr) {\r\n    const n = arr.length;\r\n    //let sd = 0;\r\n\r\n    for (let i = 1; i < n; i++) {\r\n      const x = arr[i];\r\n      let j = i - 1;\r\n\r\n      while (x < arr[j] && j >= 0) {\r\n        //sd += 1;\r\n        arr[j + 1] = arr[j];\r\n        j = j - 1;\r\n      }\r\n\r\n      //sd += 1;\r\n      arr[j + 1] = x;\r\n    }\r\n\r\n    //console.log(\"ВКЛЮЧЕНИЕ:\", sd);\r\n\r\n    return arr;\r\n  }\r\n};\r\n\r\n// реализация алгоритма сортировки прямым выбором (1.5) из методички\r\nexport const selection = {\r\n  name: METHOD_ALIAS_SELECTION,\r\n  run(arr) {\r\n    const n = arr.length;\r\n    //let sd = 0;\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n      let x = arr[i];\r\n      let k = i;\r\n\r\n      for (let j = i + 1; j < n; j++) {\r\n        if (arr[j] < x) {\r\n          k = j;\r\n          x = arr[j];\r\n        }\r\n      }\r\n\r\n      //sd += 2;\r\n\r\n      arr[k] = arr[i];\r\n      arr[i] = x;\r\n    }\r\n\r\n    //console.log(\"ВЫБОР:\", sd);\r\n\r\n    return arr;\r\n  }\r\n};\r\n\r\n// реализация алгоритма сортировки прямым обменом (1.6) из методички\r\nexport const bubble = {\r\n  name: METHOD_ALIAS_BUBBLE,\r\n  run(arr) {\r\n    const n = arr.length;\r\n    //let sd = 0;\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      for (let j = n; j > i; j--) {\r\n        if (arr[j - 1] > arr[j]) {\r\n          //sd += 2;\r\n          const x = arr[j - 1];\r\n          arr[j - 1] = arr[j];\r\n          arr[j] = x;\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(\"ОБМЕН\", sd);\r\n\r\n    return arr;\r\n  }\r\n};\r\n\r\n// реализация алгоритма быстрой сортировки (1.7) из методички\r\nexport const quick = {\r\n  name: METHOD_ALIAS_QUICK,\r\n  run(arr, left, right) {\r\n    if (arr.length > 1) {\r\n      left = typeof left != \"number\" ? 0 : left;\r\n      right = typeof right != \"number\" ? arr.length - 1 : right;\r\n\r\n      let pivot = arr[Math.floor((right + left) / 2)],\r\n        i = left,\r\n        j = right;\r\n\r\n      while (i <= j) {\r\n        while (arr[i] < pivot) {\r\n          i++;\r\n        }\r\n\r\n        while (arr[j] > pivot) {\r\n          j--;\r\n        }\r\n\r\n        if (i <= j) {\r\n          const temp = arr[i];\r\n          arr[i] = arr[j];\r\n          arr[j] = temp;\r\n\r\n          i++;\r\n          j--;\r\n        }\r\n      }\r\n\r\n      if (left < i - 1) {\r\n        this.run(arr, left, i - 1);\r\n      }\r\n\r\n      if (i < right) {\r\n        this.run(arr, i, right);\r\n      }\r\n    }\r\n\r\n    return arr;\r\n  }\r\n};\r\n","import {\r\n  ARRAY_ALIAS_GENERATOR_RANDOM,\r\n  ARRAY_ALIAS_GENERATOR_SORTED,\r\n  ARRAY_ALIAS_GENERATOR_REVERSED,\r\n  ARRAY_ALIAS_GENERATOR_THIRD_SORTED,\r\n  ARRAY_ALIAS_GENERATOR_TWOTHIRDS_SORTED\r\n} from \"./constants\";\r\n\r\n// случайно заполненный массив\r\nexport const random = {\r\n  name: ARRAY_ALIAS_GENERATOR_RANDOM,\r\n  run(length, max, min) {\r\n    return Array.from({ length }, () => Math.round(Math.random() * (max - min)) + min);\r\n  }\r\n};\r\n\r\n// отсортированный массив\r\nexport const sorted = {\r\n  name: ARRAY_ALIAS_GENERATOR_SORTED,\r\n  run(length) {\r\n    return Array.from({ length }, (e, i) => i);\r\n  }\r\n};\r\n\r\n// обратно отсортированный массив\r\nexport const reverseSorted = {\r\n  name: ARRAY_ALIAS_GENERATOR_REVERSED,\r\n  run(length) {\r\n    return Array.from({ length }, (e, i) => length - i);\r\n  }\r\n};\r\n\r\n// отсортированный на 1/3 массив\r\nexport const thirdSorted = {\r\n  name: ARRAY_ALIAS_GENERATOR_THIRD_SORTED,\r\n  run(length, min, max) {\r\n    const target = length / 3;\r\n    return Array.from({ length }, (e, i) => i > target ? Math.round(Math.random() * (max - min)) + min : i);\r\n  }\r\n};\r\n\r\n// отсортированный на 2/3 массив\r\nexport const twoThirdsSorted = {\r\n  name: ARRAY_ALIAS_GENERATOR_TWOTHIRDS_SORTED,\r\n  run(length, min, max) {\r\n    const target = length * 2 / 3;\r\n    return Array.from({ length }, (e, i) => i > target ? Math.round(Math.random() * (max - min)) + min : i);\r\n  }\r\n};\r\n","// импорт конфига\r\nimport \"./config\";\r\n\r\n// импорт замерщика времени выполнения функции\r\nimport meter from \"./meter\";\r\n// импорт ручного заполнения массива\r\nimport manualArrayInput from \"./manual-array-input\";\r\n\r\n// импорт csv генератора для результатов\r\nimport CSVGenerator from \"./csvgen\";\r\n// импорт менеджера результатов\r\nimport ResultsManager from \"./results-manager\";\r\n\r\n// импорт методов сортировки и генерации массивов в объекты соотвественно\r\nimport * as ArraySortMethods from \"./sort-methods\";\r\nimport * as ArrayGenMethods from \"./array-generators\";\r\n\r\n// импорт констант\r\nimport {\r\n  ARRAY_SIZES,\r\n  ARRAY_MIN_VALUE,\r\n  ARRAY_MAX_VALUE,\r\n  CSV_NEEDED,\r\n  CSV_OUTPUT_PATH,\r\n  MANUAL_INPUT\r\n} from \"./constants\";\r\n\r\n// основная async функция программы\r\n(async function main() {\r\n  // если в .env CSV=true, то создаем экземпляры для создания csv, и записи результатов\r\n  const csv = CSV_NEEDED ? new CSVGenerator() : null;\r\n  const results = CSV_NEEDED ? new ResultsManager() : null;\r\n\r\n  // конвертируем значения объектов для генерации и сортировки в массивы\r\n  const genMethodsArray = Object.values(ArrayGenMethods);\r\n  const sortMethodsArray = Object.values(ArraySortMethods);\r\n\r\n  // проходимся циклом по методам генерации\r\n  for (const currentGenMethod of genMethodsArray) {\r\n    // если нужен csv, то очищаем результаты для текущего метода генерации\r\n    if (csv) results.clear();\r\n\r\n    console.log(`\\n\\nПорядок массива: ${currentGenMethod.name}`);\r\n\r\n    // проходимся циклом по размерам массива\r\n    for (const currentSize of ARRAY_SIZES) {\r\n      console.log(`\\nКоличество элементов: ${currentSize}`);\r\n\r\n      // если текущее количество элементов = 20, и в .env MANUAL_INPUT=true\r\n      // то спрашиваем элементы массива у пользователя\r\n      // иначе - генерируем текущим методом\r\n      const array = currentSize === 20 && MANUAL_INPUT === true\r\n        ? await manualArrayInput(currentSize)\r\n        : currentGenMethod.run(currentSize, ARRAY_MIN_VALUE, ARRAY_MAX_VALUE);\r\n\r\n      // проходимся циклом по методам сортировки\r\n      for (const currentSortMethod of sortMethodsArray) {\r\n        // деструктурируем текущее имя метода\r\n        const { name } = currentSortMethod;\r\n        // передаем функцию и аргументы для нее, и деструктурируем time из результата замера\r\n        const { time } = await meter.race(currentSortMethod, array.slice());\r\n        console.log(`${name}: ${time}ms`);\r\n\r\n        // если нужен csv, то записываем результат текущего метода сортировки для текущего метода генерации\r\n        if (csv) {\r\n          const { name } = currentSortMethod;\r\n          results.add(name, time);\r\n        }\r\n      }\r\n    }\r\n\r\n    // если нужен csv, то добавляем строки в виде\r\n    // Имя_Метода\r\n    // ;размеры;массивов;n;\r\n    // Метод_Генерации;для_размера_1;для_размера_2;и т.д.\r\n    if (csv) {\r\n      csv.addRow();\r\n      csv.addRow(currentGenMethod.name);\r\n      csv.addRow([null, ...ARRAY_SIZES]);\r\n\r\n      Object.entries(results.get()).forEach(([name, timings]) => {\r\n        csv.addRow([name, ...timings]);\r\n      });\r\n    }\r\n  }\r\n\r\n  // если нужен csv, то записываем его в файл\r\n  if (csv) await csv.writeToFile(CSV_OUTPUT_PATH);\r\n})();\r\n"],"names":["performance"],"mappings":";;;;;;;AAAA;AAEA,MAAM,CAAC,MAAM,EAAE;;ACFf;AACA,AACA;AACA,MAAM,KAAK,GAAG;AACd;AACA;AACA;AACA,EAAE,MAAM,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,EAAE;AAC5B;AACA,IAAI,MAAM,CAAC,GAAGA,sBAAW,CAAC,GAAG,EAAE,CAAC;AAChC;AACA,IAAI,MAAM,MAAM,GAAG,OAAO,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1F;AACA,IAAI,OAAO,EAAE,IAAI,EAAE,CAACA,sBAAW,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC;AAChE,GAAG;AACH,CAAC,CAAC;;ACbF;AACA,AAAe,SAAS,KAAK,CAAC,QAAQ,GAAG,EAAE,EAAE;AAC7C;AACA,EAAE,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;AAClC;AACA,IAAI,MAAM,EAAE,GAAG,QAAQ,CAAC,eAAe,CAAC;AACxC,MAAM,KAAK,EAAE,OAAO,CAAC,KAAK;AAC1B,MAAM,MAAM,EAAE,OAAO,CAAC,MAAM;AAC5B,KAAK,CAAC,CAAC;AACP;AACA;AACA,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,KAAK;AAC5C;AACA,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC;AACjB;AACA,MAAM,OAAO,CAAC,MAAM,CAAC,CAAC;AACtB,KAAK,CAAC,CAAC;AACP,GAAG,CAAC,CAAC;AACL,CAAC;;ACpBD;AACA,AACA;AACA,AAAe,eAAe,gBAAgB,CAAC,MAAM,EAAE;AACvD;AACA,EAAE,IAAI,KAAK,GAAG,IAAI,CAAC;AACnB;AACA,EAAE,OAAO,KAAK,KAAK,IAAI,EAAE;AACzB;AACA,IAAI,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,wBAAwB,CAAC,CAAC,CAAC;AAC5E;AACA,IAAI,IAAI;AACR;AACA,MAAM,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC3C;AACA;AACA;AACA,MAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM,EAAE;AACtC,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,mBAAmB,EAAE,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;AACnF,OAAO,MAAM;AACb,QAAQ,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/C,OAAO;AACP,KAAK,CAAC,OAAO,CAAC,EAAE;AAChB,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC,2BAA2B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;AAC/D,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA,EAAE,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACpD,CAAC;;AC9BD;AACA,AACA;AACA,AAAe,MAAM,YAAY,CAAC;AAClC,EAAE,WAAW,GAAG;AAChB;AACA,IAAI,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;AACxB,GAAG;AACH;AACA;AACA,EAAE,GAAG,CAAC,KAAK,EAAE;AACb,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC;AAC7D,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;AACA;AACA;AACA,EAAE,MAAM,CAAC,KAAK,EAAE;AAChB,IAAI,IAAI,OAAO,KAAK,KAAK,WAAW,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;AAC/E,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,KAAK,KAAK,WAAW,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;AACxE,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH;AACA;AACA,EAAE,KAAK,GAAG;AACV,IAAI,OAAO,IAAI,CAAC,SAAS;AACzB,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,IAAI,OAAO,CAAC,KAAK,WAAW,GAAG,EAAE,GAAG,CAAC,CAAC;AAClE,OAAO,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;AAClB,GAAG;AACH;AACA;AACA,EAAE,MAAM,WAAW,CAAC,IAAI,EAAE;AAC1B,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;AAC9B;AACA,IAAI,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;AAC5C,MAAM,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,GAAG,KAAK;AACxC,QAAQ,IAAI,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;AAC7B,aAAa,OAAO,CAAC,IAAI,CAAC,CAAC;AAC3B,OAAO,CAAC,CAAC;AACT,KAAK,CAAC,CAAC;AACP,GAAG;AACH,CAAC;;AC1CD;AACA,AAAe,MAAM,cAAc,CAAC;AACpC,EAAE,WAAW,GAAG;AAChB,IAAI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACvB,GAAG;AACH;AACA,EAAE,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE;AACnB,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;AAC7B,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AACtC,KAAK,MAAM;AACX,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;AACpC,KAAK;AACL,GAAG;AACH;AACA,EAAE,KAAK,GAAG;AACV,IAAI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;AACvB,GAAG;AACH;AACA,EAAE,GAAG,GAAG;AACR,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC;AACzB,GAAG;AACH,CAAC;;ACrBD;AACA,AAAO,MAAM,WAAW,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAC9D,AAAO,MAAM,eAAe,GAAG,CAAC,CAAC;AACjC,AAAO,MAAM,eAAe,GAAG,GAAG,CAAC;AACnC;AACA;AACA,AAAO,MAAM,4BAA4B,GAAG,mBAAmB,CAAC;AAChE,AAAO,MAAM,4BAA4B,GAAG,iBAAiB,CAAC;AAC9D,AAAO,MAAM,8BAA8B,GAAG,kBAAkB,CAAC;AACjE,AAAO,MAAM,kCAAkC,GAAG,wCAAwC,CAAC;AAC3F,AAAO,MAAM,sCAAsC,GAAG,wCAAwC,CAAC;AAC/F;AACA;AACA,AAAO,MAAM,sBAAsB,GAAG,wBAAwB,CAAC;AAC/D,AAAO,MAAM,sBAAsB,GAAG,oBAAoB,CAAC;AAC3D,AAAO,MAAM,mBAAmB,GAAG,oBAAoB,CAAC;AACxD,AAAO,MAAM,kBAAkB,GAAG,0BAA0B,CAAC;AAC7D;AACA;AACA;AACA,AAAO,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,MAAM,CAAC;AACrD;AACA,AAAO,MAAM,eAAe,GAAG,eAAe,CAAC;AAC/C;AACA;AACA,AAAO,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,KAAK,MAAM,CAAC;;ACzBhE;AACA,AAMA;AACA;AACA,AAAO,MAAM,SAAS,GAAG;AACzB,EAAE,IAAI,EAAE,sBAAsB;AAC9B,EAAE,GAAG,CAAC,GAAG,EAAE;AACX,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;AACzB;AACA;AACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAChC,MAAM,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACvB,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACpB;AACA,MAAM,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;AACnC;AACA,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC5B,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAClB,OAAO;AACP;AACA;AACA,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACrB,KAAK;AACL;AACA;AACA;AACA,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH,CAAC,CAAC;AACF;AACA;AACA,AAAO,MAAM,SAAS,GAAG;AACzB,EAAE,IAAI,EAAE,sBAAsB;AAC9B,EAAE,GAAG,CAAC,GAAG,EAAE;AACX,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;AACzB;AACA;AACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACpC,MAAM,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACrB,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;AAChB;AACA,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AACtC,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;AACxB,UAAU,CAAC,GAAG,CAAC,CAAC;AAChB,UAAU,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACrB,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AACtB,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACjB,KAAK;AACL;AACA;AACA;AACA,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH,CAAC,CAAC;AACF;AACA;AACA,AAAO,MAAM,MAAM,GAAG;AACtB,EAAE,IAAI,EAAE,mBAAmB;AAC3B,EAAE,GAAG,CAAC,GAAG,EAAE;AACX,IAAI,MAAM,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;AACzB;AACA;AACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAChC,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAClC,QAAQ,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE;AACjC;AACA,UAAU,MAAM,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/B,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9B,UAAU,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AACrB,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH,CAAC,CAAC;AACF;AACA;AACA,AAAO,MAAM,KAAK,GAAG;AACrB,EAAE,IAAI,EAAE,kBAAkB;AAC1B,EAAE,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE;AACxB,IAAI,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,EAAE;AACxB,MAAM,IAAI,GAAG,OAAO,IAAI,IAAI,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC;AAChD,MAAM,KAAK,GAAG,OAAO,KAAK,IAAI,QAAQ,GAAG,GAAG,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC;AAChE;AACA,MAAM,IAAI,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC;AACrD,QAAQ,CAAC,GAAG,IAAI;AAChB,QAAQ,CAAC,GAAG,KAAK,CAAC;AAClB;AACA,MAAM,OAAO,CAAC,IAAI,CAAC,EAAE;AACrB,QAAQ,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE;AAC/B,UAAU,CAAC,EAAE,CAAC;AACd,SAAS;AACT;AACA,QAAQ,OAAO,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE;AAC/B,UAAU,CAAC,EAAE,CAAC;AACd,SAAS;AACT;AACA,QAAQ,IAAI,CAAC,IAAI,CAAC,EAAE;AACpB,UAAU,MAAM,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9B,UAAU,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1B,UAAU,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACxB;AACA,UAAU,CAAC,EAAE,CAAC;AACd,UAAU,CAAC,EAAE,CAAC;AACd,SAAS;AACT,OAAO;AACP;AACA,MAAM,IAAI,IAAI,GAAG,CAAC,GAAG,CAAC,EAAE;AACxB,QAAQ,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;AACnC,OAAO;AACP;AACA,MAAM,IAAI,CAAC,GAAG,KAAK,EAAE;AACrB,QAAQ,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;AAChC,OAAO;AACP,KAAK;AACL;AACA,IAAI,OAAO,GAAG,CAAC;AACf,GAAG;AACH,CAAC,CAAC;;;;;;;;;;AC3HF;AACA,AAAO,MAAM,MAAM,GAAG;AACtB,EAAE,IAAI,EAAE,4BAA4B;AACpC,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE;AACxB,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;AACvF,GAAG;AACH,CAAC,CAAC;AACF;AACA;AACA,AAAO,MAAM,MAAM,GAAG;AACtB,EAAE,IAAI,EAAE,4BAA4B;AACpC,EAAE,GAAG,CAAC,MAAM,EAAE;AACd,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;AAC/C,GAAG;AACH,CAAC,CAAC;AACF;AACA;AACA,AAAO,MAAM,aAAa,GAAG;AAC7B,EAAE,IAAI,EAAE,8BAA8B;AACtC,EAAE,GAAG,CAAC,MAAM,EAAE;AACd,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,MAAM,GAAG,CAAC,CAAC,CAAC;AACxD,GAAG;AACH,CAAC,CAAC;AACF;AACA;AACA,AAAO,MAAM,WAAW,GAAG;AAC3B,EAAE,IAAI,EAAE,kCAAkC;AAC1C,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE;AACxB,IAAI,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,CAAC;AAC9B,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;AAC5G,GAAG;AACH,CAAC,CAAC;AACF;AACA;AACA,AAAO,MAAM,eAAe,GAAG;AAC/B,EAAE,IAAI,EAAE,sCAAsC;AAC9C,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE;AACxB,IAAI,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;AAClC,IAAI,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC;AAC5G,GAAG;AACH,CAAC,CAAC;;;;;;;;;;;AChDF;AACA,AAyBA;AACA;AACA,CAAC,eAAe,IAAI,GAAG;AACvB;AACA,EAAE,MAAM,GAAG,GAAG,UAAU,GAAG,IAAI,YAAY,EAAE,GAAG,IAAI,CAAC;AACrD,EAAE,MAAM,OAAO,GAAG,UAAU,GAAG,IAAI,cAAc,EAAE,GAAG,IAAI,CAAC;AAC3D;AACA;AACA,EAAE,MAAM,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;AACzD,EAAE,MAAM,gBAAgB,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAC3D;AACA;AACA,EAAE,KAAK,MAAM,gBAAgB,IAAI,eAAe,EAAE;AAClD;AACA,IAAI,IAAI,GAAG,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC;AAC7B;AACA,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,qBAAqB,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACjE;AACA;AACA,IAAI,KAAK,MAAM,WAAW,IAAI,WAAW,EAAE;AAC3C,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,wBAAwB,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;AAC5D;AACA;AACA;AACA;AACA,MAAM,MAAM,KAAK,GAAG,WAAW,KAAK,EAAE,IAAI,YAAY,KAAK,IAAI;AAC/D,UAAU,MAAM,gBAAgB,CAAC,WAAW,CAAC;AAC7C,UAAU,gBAAgB,CAAC,GAAG,CAAC,WAAW,EAAE,eAAe,EAAE,eAAe,CAAC,CAAC;AAC9E;AACA;AACA,MAAM,KAAK,MAAM,iBAAiB,IAAI,gBAAgB,EAAE;AACxD;AACA,QAAQ,MAAM,EAAE,IAAI,EAAE,GAAG,iBAAiB,CAAC;AAC3C;AACA,QAAQ,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;AAC5E,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1C;AACA;AACA,QAAQ,IAAI,GAAG,EAAE;AACjB,UAAU,MAAM,EAAE,IAAI,EAAE,GAAG,iBAAiB,CAAC;AAC7C,UAAU,OAAO,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAClC,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,IAAI,IAAI,GAAG,EAAE;AACb,MAAM,GAAG,CAAC,MAAM,EAAE,CAAC;AACnB,MAAM,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AACxC,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,WAAW,CAAC,CAAC,CAAC;AACzC;AACA,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK;AACjE,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC;AACvC,OAAO,CAAC,CAAC;AACT,KAAK;AACL,GAAG;AACH;AACA;AACA,EAAE,IAAI,GAAG,EAAE,MAAM,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;AAClD,CAAC,GAAG,CAAC"}